import sys
from itertools import combinations
input = sys.stdin.readline


def word_to_bin(arr):
    
    default = list('00000000000000000000000000')

    for i in arr:
        default[26 - (ord(i) - ord('a'))] = '1'
    # int() 함수로 0b... 이진법 문자열을 int 로 바꿀때는 뒤에 진법 수 도 같이 써준다 #
    return int('0b' + ''.join(default), 2)

n , k = map(int, input().split())
wordList = []
cand = set()

for _ in range(n):
    # input으로 입력받을때 맨 마지막 입력은 스페이스바 입력임을 주의하자, 특히 슬라이싱 이나 인덱싱 할때 #
    word = (input().rstrip())[4:-4]
    
    tmp = set(word) - {'a' , 'n' , 't', 'i' , 'c'}
    
    wordList.append(tmp)
    
    for i in tmp:
        cand.add(i)
    
    
if k < 5:
    print(0)
    
else:
 
    binWordList = [word_to_bin(i) for i in wordList]
    
    answer = 0
    # 이 지점에서 cand의 원소가 len(card) 보다 작으면 combination 이 적용되지 않는다) 그래서 min 함수 사용 #
    candidate = combinations(cand , min(k - 5 , len(cand)))

    for item in candidate:
        
        comp = word_to_bin(item)
        cnt = 0

        for now in binWordList:
            # 비교를 비트마스킹을 통해 한다. 맨 처음 set으로 연산할때는 모든 원소를 in을 사용해서 비교해야 하지만 
              비트마스킹을 이용하면 더 빠르게 비교가 가능하다 #
            if now & comp == now:
                cnt += 1
            
        answer = max(answer , cnt)
    
    print(answer)
            

# 맨 처음 set 으로 풀다가 시간초과가 나왔다. set 이면 in 연산을 수행하는데 O(1) 이라서 빠르게 가능한가 싶었는데 
  시간초과가 나서 비트마스킹 으로 노선을 돌린 문제 #
