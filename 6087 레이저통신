### 그래프 탐색 문제###
import sys
from collections import deque
input = sys.stdin.readline
INF = int(1e9)

w , h = map(int, input().split())
graph = [[] for _ in range(h)]
dp = [[INF] * w for _ in range(h)]
lazer = []

for i in range(h):
  graph[i] = list(input().rstrip())
  for j in range(w):
    if graph[i][j] == 'C':
      lazer.append((i , j))

dx = [0 , -1 , 0 , 1]
dy = [-1 , 0 , 1 , 0]

queue = deque()
for i in range(4):
  queue.append((lazer[0][0] , lazer[0][1] , i , 0))
  
while queue:
  y , x , direction , cnt = queue.popleft()
  for i in range(4):
    ny = y + dy[i]
    nx = x + dx[i]
    if 0 <= nx < w and 0 <= ny < h:
      if graph[ny][nx] == 'C':
          if direction == i:
            if dp[ny][nx] >= cnt:
              dp[ny][nx] = cnt
          else:
            if dp[ny][nx] >= cnt + 1:
              dp[ny][nx] = cnt + 1
            
      elif graph[ny][nx] == '.':
          if direction == i:
            if dp[ny][nx] >= cnt:
              dp[ny][nx] = cnt
              queue.append((ny , nx , i , cnt))
          else:
            if dp[ny][nx] >= cnt + 1:
              dp[ny][nx] = cnt + 1
              queue.append((ny , nx , i , cnt + 1))
      
print(dp[lazer[1][0]][lazer[1][1]])

### 방향이 바뀌는 경우 더 빠르게 다른 레이저에 접근 할 수도 있다 , 따라서 dp에서 cnt 와 같은 경우도 고려 해주어야함###
### 시간이 오래 걸려서 개선된 코드를 찾아봄###

def bfs(x, y):
	q = deque()
	q.append((x, y))
	visited[x][y] = 0
	while q:
		x, y = q.popleft()
    # 맨 처음 i 방향을 택했으면#
		for i in range(4):
			nx = x+dx[i]; ny = y+dy[i]
			while True:
        #범위를 벗어나면 break#
				if not(0<=nx<n and 0<=ny<m): break
        #벽을 만나면 break#
				if graph[nx][ny] == '*': break
        #현재 경로보다 더 많은 거울이 필요한 경우 break#
				if visited[nx][ny] < visited[x][y]+1: break
				q.append((nx,ny))
				visited[nx][ny] = visited[x][y] + 1
        #i는 위의 방향 그대로 유지된다 , 따라서 위에서 정했던 방향으로 계속 탐색#
				nx += dx[i]; ny += dy[i]

### 한 방향으로 쭉 탐색하는 기법이다.##


