import heapq
import sys

def solution(n , start , end , roads , traps):

    answer = 0
    INF = sys.maxsize
    ## dp 에는 노드들의 갯수와 그 노드들이 정방향 , 역방향 일때 상태를 포함해 최소를 저장하는 역할 ##
    dp = [[INF for _ in range(n + 1)] for _ in range(1 << len(traps))]
    ## traps_index 는 트랩을 인덱스와 같이 저장하는데 이는 비트마스킹을 이용하기 위해서 이다 ##
    traps_index = {value : ind for ind , value in enumerate(traps)}
    node_list = []
    graph = [[] for _ in range(n + 1)]

    for road in roads:
        x , y , pay = road
        ## append 의 세번째 원소가 0 이면 정방향 그래프 ##
        ## append 의 세번째 원소가 1 이면 역방향 그래프 ##
        graph[x].append([y , pay , 0])
        graph[y].append([x , pay , 1])
    ## 힙에 현재 시간 , 현재 노드 , 현재 그래프 상태 저장 ##
    heapq.heappush(node_list , (0 , start , 0))
    dp[0][start] = 0

    while node_list:
        ## 현재 시간 , 현재 노드 , 현재 그래프 상태를 힙에서 꺼낸다 ##
        cur_time , cur_node , state = heapq.heappop(node_list)

        if end == cur_node:
            answer = cur_time
            break

        if dp[state][cur_node] < cur_time:
            continue
        ## 그래프를 순환하면서 ##
        for next_node , pay , flag in graph[cur_node]:
            next_state = state
            ## 만약 현재 노드가 trap 노드면 ##
            if cur_node in traps:
                ## 그 다음 노드도 trap 인 경우 ##
                if next_node in traps:
                    ## cur_flag 를 통해 현재 노드와 다음노드의 trap 활성 상태를 조사한다 ##
                    ## cur_flag 가 0 이면 , 두 노드 모두 trap 비활성 상태 또는 모두 활성 상태 ##
                    ## cur_flag 가 1 이면 , 두 노드 중 하나만 trap 활성상태 ##
                    cur_flag = ((1 & (state >> traps_index[cur_node])) + (1 & (state >> traps_index[next_node]))) % 2
                    ## 그 다음 노드가 trap 인 경우, 다음 노드 trap 을 반영해서 next_state 에 집어넣는다 ##
                    ## 이때, next_state는 state 와 xor 연산을 통해 1 -> 0 or 0 -> 1 로 바꿔주는 과정 ##
                    next_state = state^(1 << traps_index[next_node])
                
                else:
                    ## 그 다음노드가 trap 이 아니면 현재 노드의 활성상태만 따지면 됨 ##
                    cur_flag = (1 & (state >> traps_index[cur_node]))
            
            else:
                if next_node in traps:
                    ## 현재 노드는 트랩 x , 다음 노드만 트랩 ## 
                    ## 이는 바로 위의 경우와 동일하다 ##
                    cur_flag = (1 & (state >> traps_index[next_node]))
                    next_state = state^(1 << traps_index[next_node])
                
                else:
                    ## 둘다 트랩노드가 아니면 그냥 cur_flag = 0 ##
                    cur_flag = 0
            
            if flag == cur_flag:
                ## flag 가 0 이면 정방향 , 1이면 역방향이다 ##
                if dp[next_state][next_node] > cur_time + pay:
                    dp[next_state][next_node] = cur_time + pay

                    heapq.heappush(node_list , (dp[next_state][next_node] , next_node , next_state))

    return answer

## 비트마스킹 + 다익스트라 문제 ##
## 아직 비트마스킹이 많이 익숙하지 않다는 것을 느낀 문제였다 ##
