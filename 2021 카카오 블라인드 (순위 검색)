## 문제 풀때 고민했던 부분 ##
## 완전 탐색을 이용하면 정확성은 간단히 통과가 가능할것 같은데 효율성은 통과 불가능 ##
## info 에 해당하는 정보를 트리의 형태로 저장하려고 했는데 그렇게 하면 구조가 맞지 않는다 ##
-> 예를 들어 java 다음 - 가 나오면 java 노드의 모든 원소들을 확인 해야함, 가능은 할 것 같은데 확신치 않았다.


import bisect
from itertools import combinations

def solution(info, query):

    answer = []
    comb = []
    allPeople = dict()
    
    
    for k in range(5):
        now = (list(combinations([0,1,2,3] , k)))
        for i in now:
            comb.append(i)
    ## 사람들의 정보를 allPeople 딕셔너리에 저장하는 과정이다 ##
    for people in info:

        temp = list(people.split())
        infos , score = temp[:4] , int(temp[4])
        
        ## 조합을 선택한것은 한 사람이 여러가지 경우에 포함될 수 있기 때문이다.##
        ## 예를들어 java , backend , pizza 에 경우 java - pizza / - - pizza 등 여러가지 경우에 포함된다 ##
        ## 따라서 이런 경우들을 모두 allPeople 의 key 로 저장하고 그 경우에 점수를 집어넣는다 ##
        
        for gets in comb:
            
            keyInfo = ''
            for j in range(4):

                if j in gets:
                    keyInfo += temp[j]
                else:
                    keyInfo += '-'
        
            if keyInfo in allPeople:
                allPeople[keyInfo].append(score)
            else:
                allPeople[keyInfo] = [score]
                
    ## 딕셔너리 안의 점수들을 오름차순 정렬한다 -> 이진탐색 이용을 위해서 이다 ##
    for item in allPeople.keys():
        allPeople[item] = sorted(allPeople[item])
    
    for queries in query:

        queries = list(queries.split())
        req = ''
        for i in range(0 , 7 , 2):
            req += queries[i]
        point = int(queries[7])
        
        if req in allPeople:
            ## 만약 그 req 가 딕셔너리 안에 있으면 그 사람 수 를 리스트에 append ##
            answer.append(len(allPeople[req]) - bisect.bisect_left(allPeople[req] , point))
        ## 없으면 0 append
        else:
            answer.append(0)

    return answer

## 맨 처음 고민하던 부분이 사람들을 나눌때 어떻게 나눠야 되나 였다. java / python / cpp 을 각각 0 , 1 , 2 로 놓고 그 다음 backend / frontend 를 각각 다음 자릿수 0 , 1
   로 만들어 0102 , 1021 등의 조합으로 놓을까도 생각을 해봤는데 생각이 끝까지 미치지 못하고 포기했던 것 같다. ##
## 딕셔너리 부분이 아직 많이 부족한것 같다, 좀 더 많이 풀어보고 경험을 쌓아야 할 것 같음 ##

## 딕셔너리의 key를 이용해 항목 분류 ## 
   
