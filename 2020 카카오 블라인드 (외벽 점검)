from itertools import permutations

def solution(n, weak, dist):
    
    length = len(weak)
    answer = len(dist) + 1
    
    for i in range(length):
        weak.append(weak[i] + n)
    
    for start in range(length):
        # 시작 지점을 다르게 하면서
        for friends in list(permutations(dist , len(dist))):
        # dist 의 모든 순열을 탐색한다 #
            cnt = 1
            now = weak[start] + friends[cnt - 1]
            # now 는 현재 친구가 탐색 할 수 있는 최대 위치
            for index in range(start , start + length):

                if now < weak[index]:
                    cnt += 1

                    if cnt > len(dist):
                        break
                
                    now = weak[index] + friends[cnt - 1]
            # 위 과정을 length의 길이가 모두 방문될 때 까지 반복, 불가능하면 break
            answer = min(cnt , answer)

    if answer > len(dist):
        return -1
    return answer

    
print(solution(12 , [1,3,4,9,10] , [3,5,7]))

# 원형 배열을 탐색하는 것이 주요했던 문제 #
# n 의 크기 만큼 각 원소에 더한 다음 배열에 붙여준다 , 이때 방문한 요소가 weak 의 길이 만큼 있으면 모든 지점 탐색 완료 #
# 완전탐색 문제임을 알고도 시간 초과가 났었다. 완전탐색을 할 떄 에도 더 효율적으로 할 수 있는지 고민해보자 #
** 맨 처음에는 dist의 모든 순열 * weak 의 모든 조합을 완전탐색을 통해 찾으려 했는데 이때에는 8! * 15 C 8 이므로 크기가 너무 크다 **


