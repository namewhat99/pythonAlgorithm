*dfs를 이용한 완전탐색*

def dfs(banned_id , cand , now , arr):
  global result
  # 이 함수에서 now 가 첫번째 , 두번째 , 세번째 , ... 제제 아이디를 나타낸다
  if len(arr) == len(banned_id):
    if arr not in result:
      result.append(arr)
    return
  
  for item in cand[now]:
    # cand[now]의 모든 원소를 탐색 #
    if item not in arr:
      # 만약 그 이름이 arr에 있는 이름이면 중복이므로 넣지 않는다 #
      nextArr = set(i for i in arr)
      nextArr.add(item)
      # 없는 이름이라면 지금까지 담아두었던 이름들 + 현재 후보 해서 다시 dfs 를 통해 전달한다 #
      dfs(banned_id , cand , now + 1 , nextArr)
      # 현재 제재 아이디 후보가 담겼으면 다음 제재 아이디로 넘어간다
      
      
  앞에 각 제제 아이디 별 후보군을 담아 놓은 배열이 cand 배열
  
  구조는 다음과 같다.
  
  총 제재 아이디가 4개 있으면 
  dfs(banned_id , cand , 0 , nextArr) -> 이 함수는 now 가 0 이므로 0번째 제재 아이디에 대해 후보를 nextArr에 담고 
                                         그 다음 함수 dfs(banned_id , cand , 1 , nextArr)로 전달한다.
                                         만약 후보가 없거나 이미 들어가 있는 아이디라서 추가가 되지 않았으면 그 다음 함수가 호출되지 않는다.
  **배운점: dfs를 이용해 탐색을 좀 더 많이 다뤄봐야 될 듯 하다. **
