import sys
input = sys.stdin.readline

t = int(input())
result = []
## dfs로 재귀함수를 짤때 return 값들에 주의##
  return 을 잘못한 경우 , return 을 안해서 함수가 끝까지 진행되지 않는 경우 등
def dfs(x):
'''방문한 경우 visited + 1'''
  visited[x] += 1
  '''visited가 2 가 되면 그 노드로 사이클을 돌아 되돌아 온 것'''
  따라서 그 노드 사이클 1 처리
  x 리턴
  if visited[x] == 2:
    cycle[x] = 1
    return x
   만약 현재 노드와 연결노드가 같으면 바로 사이클 처리'''
   -1 return
  elif x == graph[x]:
    visited[x] += 1
    cycle[x] = 1
    return -1
  else:
  '''-1 이 리턴된 경우는 사이클 형성이 실패한 것 이다'''
      return 값으로 -1을 받았으면 그 노드도 사이클 형성 안됨
  
    if cycle[graph[x]] == -1:
      cycleStartNode = dfs(graph[x])
      if cycleStartNode != -1:
        visited[x] = 2
        cycle[x] = 1
        if x == cycleStartNode:
          return -1
        else:
          return cycleStartNode
      else:
        cycle[x] = 0 
    else:
      cycle[x] = 0
  return -1
'''아이디어는 dfs를 진행해서 cycle이면 2번 방문하게 된다. 그러면 그 지점부터 되돌아오면서 다시 처음 노드까지 
  모든 노드들을 visited = 2 처리 하고 cycle = 1 처리'''
for index in range(t):
  n = int(input())
  total = 0
  graph = [0] + list(map(int, input().split()))
  ## visited 는 사이클 판단 할때 사용 , cycle은 이 노드가 cycle 인지 아닌지 판단할때 사용##
  visited = [0] * (n + 1)
  cycle = [-1] * (n + 1)
  '''사이클이 -1이 초기상태 , 0 이면 사이클 형성 안됨 , 1 이면 사이클 형성
  for y in range(1 , n + 1):
    if cycle[y] == -1:
      
      dfs(y)
  
  for k in range(1 , n + 1):
    if cycle[k] != 1:
      total += 1
 
  result.append(total)

for item in result:
  print(item)
  
 ##방향이 주어졌을때 사이클 판단##

 ''' 기본적으로 방향그래프에서 dfs로 사이클 탐색하는 과정으로 서울 지하철 2호선 문제와 아이디어는 비슷하다'''
 사이클이 형성되면 그 노드 return 
 사이클 형성이 안 되면 -1 return
 사이클이 형성되면 지나쳤던 노드들 전부 사이클 내에 포함됨
