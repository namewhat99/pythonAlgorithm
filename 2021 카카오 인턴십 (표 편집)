class Node:

    def __init__(self , prev , next):
        self.val = 'O'
        self.prev = prev
        self.next = next
        
## 각 배열의 원소들을 하나의 노드라고 생각하고 연결리스트를 사용하여 문제를 풀었다. ##
## 이 문제를 통해 느낀점 : 클래스를 하나의 새로운 자료형이라 생각하고 풀면 더 쉽게 접근이 가능할듯 하다. ##

def solution(n , k , cmd):

    now = k
    table = [Node(i - 1 , i + 1) for i in range(n)]
    stack = []

    for com in cmd:

        if com[0] == 'D':

            x = int(com[2:])
            for _ in range(x):
                now = table[now].next
        ## 문제를 풀면서 들었던 의문: 연결리스트에서 다음 노드를 따라가는데 만약 그 크기가 10,0000 이 넘어가면 시간초과가 뜨지 않을까 라는 생각 ##
        ## 이 부분은 더 찾아봐야될것 같다 ##
        elif com[0] == 'U':

            x = int(com[2:])
            for _ in range(x):
                now = table[now].prev
        
        elif com[0] == 'C':

            stack.append(now)

            if table[now].next == n:
                table[table[now].prev].next = table[now].next
                table[now].val = 'X'
                
            ## if 와 elif 부분이 이전 풀이에서 가장 애를 먹었던 부분이다 ##
            ## 예전 풀이는 인덱스롤 접근 했었는데 그러면 표의 삭제 ,복구 과정에서 원소의 O, X 여부 , list의 길이등 고려할것이 너무 많았다 ##
            ## 노드의 연결상태 만으로 이 풀이에서는 간단히 접근 가능했었다 ##
            
            elif table[now].prev == -1:
                 table[table[now].next].prev = table[now].prev
                 table[now].val = 'X'
                
            else:
                table[table[now].next].prev = table[now].prev
                table[table[now].prev].next = table[now].next
                table[now].val = 'X'

            if table[now].next == n:
                now = table[now].prev
            else:
                now = table[now].next
        else:

            x = stack.pop()

            if table[x].prev == -1:
                table[table[x].next].prev = x

            elif table[x].next == n:
                table[table[x].prev].next = x

            else:
                table[table[x].prev].next = x
                table[table[x].next].prev = x

            table[x].val = 'O'
        
    return ''.join(i.val for i in table)
    
## 상당히 애를 먹었던 문제 ##
## 가장 힘들었던 부분은 now 의 이동이었다 ##
## 원소를 삭제하거나 복구하면 원소의 갯수가 달라질때도 있고 표의 길이 변화도 있어서 now 의 끝부분 , 시작부분 처리가 가장 힘들었다 ##

## 연결리스트의 사용이 주요했던 문제이다. 파이썬에서 연결리스트는 처음 써 보는데 여러 연속된 자료구조 들 중에서 중간에 삭제 , 복구 가 들어가는 경우
   혹은 순서가 여러 경우로 바뀌는경우 사용하면 좋을듯하다. 익숙해질 필요를 느낀다 ##
