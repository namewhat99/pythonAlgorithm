import sys
input = sys.stdin.readline
from itertools import combinations
from collections import deque

n = int(input())
city = [i for i in range(1 , n + 1)]
graph = [[False] * (n + 1) for i in range(n + 1)]
ppl = [0] + list(map(int, input().split()))
result = int(1e9)

'''그래프의 연결 방법을 나타내는 방식은 여러개가 있다'''
'''보통 인덱스마다 연결되어 있는 인덱스만 저장하는 방식을 많이 쓰지만 
   이 경우 플로이드- 워셜 알고리즘에서 사용하는 인접행렬 방식을 사용하였다'''
    
  
for i in range(1 , n + 1):
  con = list(map(int, input().split()))
  for x in con[1:]:
    graph[i][x] = True

def checkGroup(one , graph):
  queue = deque()
  queue.append(one[0])
  visited = set()
  while queue:
    y = queue.popleft()
    visited.add(y)
    for x in range(len(graph[y])):
      if graph[y][x] == True and x in one and x not in visited:
        queue.append(x)
        visited.add(x)
  
  if set(one) == visited:
   
    return True
  else:
    
    return False
    

whole = sum(ppl)


for i in range(1 , n // 2 + 1):
  arr = combinations(city , i)
  for item in arr:
    one_v = 0
    one = list(item)
    other = list(set(city) - set(one))
   
    if checkGroup(one , graph) and checkGroup(other , graph):
      for j in one:
        one_v += ppl[j]
      other_v = whole - one_v
      result =  min(abs(one_v - other_v) , result)

if result == int(1e9):
  print(-1)
else:
  print(result)

'''list 사이의 뺄셈은 성립하지 않는다 예를 들어 arr = [1,2,3,4] 이고 a = [1,2] 일때 arr - a 의 결과는 [3,4] 가 아니고
   오류가 난다. 따라서 arr 에서 a 의 원소를을 제거한 list 를 만들려면 list(set(arr) - set(a)) 를 해주어야 한다'''
  
'''처음에 bfs 를 이용한 방식 , dfs를 이용한 방식을 모두 고민해봤지만 둘 다 커버하지 못하는 경우가 있는것 같았다'''
'''따라서 두 방법이 모두 아닌것 같은 경우 조합을 사용하였다'''

'''위 코드중 checkGroup 코드에서 노드들이 서로 연결되었는지 판별하는 코드는 유용할듯하다'''


  

  
