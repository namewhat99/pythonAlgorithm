
import sys
sys.setrecursionlimit(100000)


def findEmpty(n , vis):
  # vis에 없는 방 번호인 경우, 아직 사람이 배정되지 않은 방이다#
  if n not in vis:
  # 이 경우 vis[n] 은 그 입력이 들어올 때 배정해야 하는 방 번호이다 #
    vis[n] = n + 1
    return n
  # vis에 있는 경우 #
  empty = findEmpty(vis[n] , vis)
  # vis 에 없는 방 번호가 나올 때 까지 부모 노드를 따라 올라간다#
  # 사람이 없는 방 번호를 return 하고 vis 의 부모노드를 empty + 1 로 갱신해준다 #
  vis[n] = empty + 1
  return empty

def solution(k , room_number):

  vis = dict()
  answer = []
  
  for item in room_number:
    # 방 번호에 대해서 빈 번호를 찾는다#
    emptyRoom = findEmpty(item , vis)
    answer.append(emptyRoom)

  return answer
  
  ** 채점 실패시 런타임 에러일때, 재귀횟수 제한 떄문일수도 있다. sys.setrecursionlimit() 생각해보자.
  ** 분리집합인데 parent 배열을 사용하지 않고 딕셔너리를 사용한 분리집합, 잘 알아두면 좋을것 같다 **
  ** 위의 방법은 분리집합 시 재귀를 사용한 예시, 아래는 반복문을 사용한 예시이다 **
  
  def solution(k, room_number):
    
    empty = dict()
    answer = []
    
    for item in room_number:
    # 모든 방 번호에 대해서 #
        now = item
        vis = []
        
        while now in empty:
            # 만약 empty 에 now 가 있는경우, 계속 그 부모 노드를 따라 올라가는 과정이다 #
            # 이때 나중에 노드들의 parent 갱신을 위해 vis 에 노드들을 추가해준다 #
            vis.append(now)
            now = empty[now]
        # while 문 에서 벗어났으면, 빈 방을 찾은것이다 #
        empty[now] = now + 1
        
        answer.append(now)
        # 방이 채워져 있던 노드들을 모두 갱신해준다 #
        for j in vis:
            empty[j] = now + 1
        
    return answer
