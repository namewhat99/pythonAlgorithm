import sys 
from collections import deque
input = sys.stdin.readline
sys.setrecursionlimit(int(1e9))
'''dfs를 이용해서 사이클 판단이 주요'''

n = int(input())
graph = [[] for _ in range(n + 1)]
visited = [False] * (n + 1)
check = [0] * (n + 1)
dist = [0] * (n + 1)

def dfs(x , cnt):
    '''방문 처리가 되었을때 , 즉 다른 노드에서 현재 노드로 다시 되돌아온 경우에 실행된다'''
    if check[x]:
        '''이때는 사이클이 형성된 경우이다 , 사이클이 형성되려면 최소 3개의 노드를 거쳐야 한다는 점을 이용함'''
        if cnt - dist[x] >= 3:
            return x
        '''이 경우는 다른 노드를 거쳐서 바로 해당 노드로 돌아온 경우이다 ex) 1 -> 2 -> 1 처럼 돌아오는 경우
        else:
            return -1
    # 기본적으로 맨 처음에는 방문처리와 시작노드로 부터 떨어진 거리를 저장한다3
    check[x] = 1
    dist[x] = cnt
    '''리턴 값을 받을때 판별하는 부분이다'''
    for y in graph[x]:
        ''' 만약 CSN의 리턴값이 -1 이면 바로 옆노드에서 되돌아온 경우이다'''
        cycleStartNode = dfs(y , cnt + 1)
        # 그 외에는 사이클이 형성되어 사이클이 형성된 노드의 값을 돌려받는데 이때 되돌아오면서
          사이클에 포함된 모든 노드들의 check 값이 2 로 바뀐다#
        if cycleStartNode != -1:
            check[x] = 2
            # 마지막 까지 되돌아오면 함수 종료
            if cycleStartNode == x:
                return -1
            else:
                return cycleStartNode
    return -1
    
'''dfs로 재귀함수를 실행하면 함수의 종료는 실행순서으 역순으로 일어남'''
   이를 이용해서 문제를 푼다
    for _ in range(n):
    a , b = map(int, input().split())
    graph[a].append(b)
    graph[b].append(a)
    
dfs(1 , 0)



pivot = 0
for i in range(1 , len(check)):
    if check[i] == 2:
        pivot = i
        break

queue = deque()
queue.append((pivot , 0))
visited[pivot] = True
dist[pivot] = 0
## 사이클이 판단이 되면 bfs를 이용하여 사이클과의 거리 판단##
while queue:
    x  , d = queue.popleft()
    for y in graph[x]:
        if visited[y] == False:
            if check[y] == 2:
                queue.append((y , d))
                dist[y] = 0
                visited[y] = True
            else:
                queue.append((y , d + 1))
                dist[y] = d + 1
                visited[y] = True
        

for i in range(1 , len(dist)):
    print(dist[i],  end = ' ')
    
    
    ## 무방향 그래프에서 사이클 판단이 주요했던 문제##
    
    
