import sys
input = sys.stdin.readline

def dfs(inStart , inEnd , postStart , postEnd):
    global inOrder
    global postOrder
    
    if inStart > inEnd or postStart > postEnd:
        return

    now = postOrder[postEnd]
    index = pos[now]
    preOrder.append(now)

   
    dfs(inStart , index - 1 , postStart , postStart + index - inStart - 1)
    dfs(index + 1 , inEnd , postStart + index - inStart  , postEnd - 1)
    

    
    
n = int(input())
inOrder = list(map(int , input().split()))
postOrder = list(map(int, input().split()))
preOrder = []

pos = [0]*(n+1) 
for i in range(n): 
    pos[inOrder[i]] = i



dfs(0 , n - 1 , 0 , n - 1)

for item in preOrder:
    print(item , end = ' ')

** 트리의 순회 **
1. 전위 순회 / 중위 순회 / 후위 순회 -> 이 중 2개가 주어지면 나머지 하나를 구할 수 있다

2. 전위 순회 or 후위 순회를 통해 배열의 끝 쪽에서 부모노드를 구할 수 있고 이를 중위 노드에 적용시켜 중위 노드에서
   양쪽으로 left 자식 노드 , right 자식 노드 를 구한다.
   
3. 이 길이를 이용하여 전위 혹은 후위노드에서 다시 left , right 를 구해 이를 dfs 로 전달

4. 전위/ 중위 /후위 순회는 visit 지점을 어디로 놓느냐에 따라 간단하게 바꿀 수 있음

5. arr.index() 를 사용할때 -> 시간복잡도 O(N) 이 걸린다. 이를 해결하기 위해 
   for i in range(n): 
    pos[inOrder[i]] = i   이 부분을 쓴 건데 값을 이용해 그 인덱스를 구하는 방법이다. 만약 탐색이 여러번 이루어져야 하는 경우라면 이를 사용하는것이 더 효과적이다.
    
 
