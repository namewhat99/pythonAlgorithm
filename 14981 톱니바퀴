import sys
import copy
from collections import deque
input = sys.stdin.readline

cur_list = [[] for i in range(5)]
next_list = [[] for i in range(5)]
graph = [[] , [2], [1 , 3] , [2 , 4] , [3]]
visited = [False] * 5
result = 0


for i in range(1,  5):
  cur_list[i] = list(map(int, input().rstrip()))
next_list = copy.deepcopy(cur_list)

k = int(input())

def check(cur , nex , way):
  global cur_list
  if cur > nex:
    if cur_list[cur][6] == cur_list[nex][2]:
      return None
    else:
      return -way
  if cur < nex:
    if cur_list[cur][2] == cur_list[nex][6]:
      return None
    else:
      return -way

def rotate(num , way):
  global cur_list
  global next_list
  if way == 1:
    pivot = cur_list[num][7]
    next_list[num] = [pivot] + cur_list[num][:7]
  else:
    pivot = cur_list[num][0]
    next_list[num] = cur_list[num][1:] + [pivot]

for _ in range(k):
  first , way = map(int, input().split())
  visited = [False] * 5
  queue = deque()
  queue.append((first , way))
  visited[first] = True

  while queue:
    cur , way = queue.popleft()
    rotate(cur , way)
    
    for item in graph[cur]:
      if visited[item] == False:
        visited[item] = True
        item_dir = check(cur , item , way)
        if item_dir != None:
          rotate(item , item_dir)
          queue.append((item , item_dir))
    
  cur_list = copy.deepcopy(next_list)


result = cur_list[1][0] + 2 * cur_list[2][0] + 4 * cur_list[3][0] + 8 * cur_list[4][0]

print(result)

'''bfs나 dfs일때 visited 배열 또는 원래 graph 로 초기화'''(필요할때)
